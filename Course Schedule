class Solution {
    public boolean canFinish(int n, int[][] pre) {
          ArrayList<Integer>[] graph = new ArrayList[n];
        for(int i=0;i<n;i++)
        {
            graph[i] = new ArrayList<>();
        }
         for(int i=0;i<pre.length;i++)
        {
            addEdge(pre[i][0],pre[i][1],graph);
        }
        return khansAlgo(n,graph); 
    }
    
    public static void addEdge(int u, int v,ArrayList<Integer>[] graph)
    { 
    graph[v].add(u);

    }
    public static boolean khansAlgo(int n,ArrayList<Integer>[] graph)
{
     int[] ie = new int[n];
    for(int i=0;i<n;i++)
    {
        for(int ele : graph[i])
        {
            ie[ele]++;
        }
    }
        
    LinkedList<Integer> que = new LinkedList<>();
    LinkedList<Integer> ans = new LinkedList<>();
        
    for(int i=0;i< n;i++)
    {
        if(ie[i] == 0)
        {
            que.addLast(i);
        }
    }
    while(que.size() != 0)
    {
        int vtx = que.removeFirst();
        ans.addLast(vtx);
    for(int nbr: graph[vtx])
    {
        System.out.println(nbr);
        if(--ie[nbr] == 0)
            que.addLast(nbr);
    }
    }
    if(ans.size() != n)
        return false;
    else
        return true;
    
}
        
}
