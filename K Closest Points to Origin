class Solution {
    class Pair{
        int a=0;
        int b=0;
        int dis=0;
    }
    public int[][] kClosest(int[][] p, int K) {
        if(p.length == 0)
            return new int[1][1];
        PriorityQueue<Pair> pq = new PriorityQueue<>((m,n)-> n.dis - m.dis);
        for(int i=0;i<p.length;i++)
        {   int x = p[i][0];
            int y =p[i][1];
            int d = x*x + y*y;
            Pair mp = new Pair();
            mp.a = p[i][0];
            mp.b = p[i][1];
            mp.dis = d;
            pq.add(mp);
            if(pq.size() > K)
                pq.poll();
            
        }
        int[][] ans = new int[pq.size()][2];
        int n = pq.size();
     for(int i=0;i<n;i++)
     {      Pair s = pq.poll();
            ans[i][0] = s.a;
            ans[i][1] = s.b;
      
     }
        return ans;

    }
}
